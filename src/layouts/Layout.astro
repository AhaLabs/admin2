---
import type { SerializableContractData } from "../protocols/types";

export interface Props {
  contractData?: SerializableContractData | undefined;
}

const { contractData } = Astro.props;
const { schema, contract, protocol } = contractData ?? {};

const cardTitle = contract ? `RAEN Admin › ${contract}` : "RAEN Admin";
const pageTitle = contract ? `${contract} ‹ RAEN Admin` : "RAEN Admin";

const description = contract
  ? `Explore ${protocol} smart contract ${contract} using an interactive admin panel`
  : "RAEN makes it easy to explore contracts on NEAR. Just build with `raen` and try it!";

// TODO: generate per-contrac/method images server-side
const image = contract ? undefined : "https://raen.dev/admin/social-banner.png";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={cardTitle} />
    <meta property="og:url" content="https://raen.dev/admin" />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content="@chadoh" />
    <meta name="twitter:title" content={cardTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />
    <script is:inline define:vars={{ contractData }}>
      window.contractData = contractData;
    </script>
  </head>
  <body class="bg-slate-200 dark:bg-black">
    <slot />
  </body>
</html>
<style is:global>
  @import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Source+Code+Pro&display=swap");

  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer base {
    a {
      @apply underline;
    }

    ul {
      @apply list-disc;
      @apply pl-10;
    }
  }
  :root {
    /* Colors */
    --light: #f0f0f0;
    --white: #fff;
    --dark: #3a3d49;
    --black: #000;
    --box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    --box-shadow-hover: 0px 4px 20px rgba(0, 0, 0, 0.25);
    --box-shadow-deep: 0px 4px 20px rgba(0, 0, 0, 0.5);

    --fg: var(--black);
    --bg: var(--light);
    --button-fg: var(--light);
    --button-bg: var(--black);

    --red: rgb(252,91,91);
    --bg-red: rgba(252,91,91,.1);
    --bg-red-gradient: linear-gradient(
      to bottom right,
      rgb(75, 61, 88),
      rgb(80, 73, 79)
    );

    color: var(--fg);
  }
  @media (prefers-color-scheme: dark) {
    :root {
      --bg: var(--black);
      --fg: var(--light);
      --button-fg: var(--black);
      --button-bg: var(--light);

      --box-shadow: none;
      --box-shadow-hover: 0px 0px 100px rgba(0,0,0,0.1) inset;
      --box-shadow-deep: 0px 0px 2px var(--gray-5), 0px 4px 20px var(--black);
    }
  }

  html {
    font-family: Inter, sans-serif;
  }

  code {
    font-family: "Source Code Pro", monospace;
  }

  .bokeh {
    --bg: var(--dark);
    --fg: var(--white);
    --button-fg: var(--light);
    --button-bg: var(--black);

    --box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    --box-shadow-hover: 0px 4px 20px rgba(0, 0, 0, 0.25);
    --box-shadow-deep: 0px 4px 20px rgba(0, 0, 0, 0.5);

    background: var(--bg) url(./circles.svg);
    background-size: calc(max(100%, 1440px));
    background-repeat: no-repeat;
  }
</style>
